//! Functionality for handling Anki cards and decks.

mod kanji;
mod word;

pub use self::{
    kanji::{Kanji, KanjiCard, KanjiWord},
    word::{Furigana, Sentence, SentenceWord, WordCard, WordKanji},
};
pub use reanki::Deck;
use std::sync::Arc;

pub fn create_deck(
    name: String,
    id: i32,
    mut word_cards: Vec<WordCard>,
    mut kanji_cards: Vec<KanjiCard>,
) -> Deck {
    let mut deck = Deck::new(id, name, "Deck automatically generated by lbr".to_string());
    let word_model = Arc::new(word::create_model());
    let kanji_model = Arc::new(kanji::create_model());
    let word_template = Arc::new(word::create_template());
    let kanji_template = Arc::new(kanji::create_template());
    word_cards.sort_unstable_by(|a, b| a.word_sentences.cmp(&b.word_sentences).reverse());
    kanji_cards.sort_unstable_by(|a, b| a.kanji_words.cmp(&b.kanji_words).reverse());
    for (order, card) in word_cards.into_iter().enumerate() {
        tracing::debug!("creating word card {}", card.word);
        deck.add_note(card.into_note(word_model.clone(), word_template.clone(), order as u16));
        tracing::debug!("created card");
    }
    for (order, card) in kanji_cards.into_iter().enumerate() {
        tracing::debug!("creating kanji card {}", card.kanji);
        deck.add_note(card.into_note(kanji_model.clone(), kanji_template.clone(), order as u16));
        tracing::debug!("created card");
    }
    deck
}
